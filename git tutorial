FROM THE NET NINJA CHANNEL

to get the version of git we have installed

git --version

If we want to make changes git is gonna want to know who did it in order to keep track of it, so that's is why
we have to create a user:

git config --global user.name david

And adding the corresponding email

git config --global user.email david@hotmail.com

There is only one user so logically david@hotmail.com correspond to user david. If we want to see them, just execute:

$ git config user.name
david
-----------------------------------------------------------------------------------


Repo's: 
-------
Container for project you want to track with Git, can be local or remote, we can have more than one repo's on our computer
for many differente projects.

tha fact that .git is present in a project folder(repo), means that git keeps track of any changes inside that folder and subfolders

COMMITS: Save points in the commited history(in the master branch if didn't create another branch yet).
--------

There are three stages:

modified(simple modified)------------>Staging(ready to be commited)------------>commited(Already commited, commited history)


To create a repo inside a folder execute in the terminal "git init" and the ".git" will apear within, when restoring Atom the folder
is gonna look differently in appereance.

Staging:
-------

Once we create or modifidy a file it'll look green in Atom------->(modified area)
Here there is nothing in the Staging area to be commited, we can visualize this executing "git status", this is gonna show you 
the modified file red color(in terminal). Then i have to do "git add <name modified file>"("git add." for all files) if we do "git status"again it'll look green this time.
this time. We can get back to the modified area as well(explained by the terminal description)

Commits:
-------

git commit -m "massage, something descriptive"

Once we do a commit the terminal is gonna message me back the details and the first letters of the commit id. To see the history of commites do "git log" or "git log --online" to see less details.

Undoing thins: In order of dengerous "Checkout commit","Revert commit","Reset commit"
-------------

Checkout commit: Read only, a particular commit in master branch "git checkout <commit id>" and to get back to the master branch do
git checkout master


Revert commit: Make a new commit that undo(revert) anything we do in the commit we dont want, doesn't delete it just add a new commit to the master branch; "git revert <commit id>" after executing this, it's gonna ask us to give a tittle to the new commit we're gonna use that undo the commit we dont want, just do ":wq" and we'll be out. We can visualize it with git log --oneline

Reset commit: Delete the master branch to the especified commit "git reset <commit id>", after this, is still possible
to change our mind becouse the changes are still in editor(Atom) in modified area. Do "git reset <commit id> --hard" to
delete completly.

Branches:
---------

We generaly don't want to mess up the master branch, so to test new features we have to work on another branch amd make commits on it, later on we can merge it back to the master branch. This way we can work on diferent features at the same time.

To make a new branch: git branch "feature-1"
To see all branches: git branch -a  ------> and asteric is gonna be attach to the branch we're on  
To change branches: git checkout "feature-1" ---------------> the asterisc will indicate the branch we're on


To delete a branch: 

	git checkout master
	git branch -d feature-1 --------> work if we merged the branch to the master, other ways it's gonna worn us first, if we want to delete it directly use "-D" instead of "-d"
   
Working on two branches:

Being in the master branch, we need to create a branch and checkout to that branch, but we can do both at the same time by doing;
"git checkout -b <feature-a>".


Merges and conflic:
------------------

We need to be in the branch we're gonna merge into; git checkout master ---> git merge feature-a.
Doing "git log" in master after merge ---> 45tfg Merge branch 'feature-a'
	    		                   t54fg added <message of last commit in branch feature-a>

Every operations on branches we do are done between saved points(commits), there could be conflics when for example do a commit in the master branch while working on another branches(feature-a for example), we're gonna find out when trying to merge, we just solved the conflics in the editor and commit(on the master), this time we dont need a message so ----> git commit--->:wq and that's it.

The message of the merge "Merge branch 'feature-a'" is gonna be hanging around wating for us to solve the conflic, once we solve it and make "git commit" this message is set in the history of commits as "Merge branch 'feature-a'"

Github:
-------

It's a service that allow us to set up hosted repo's or remote repo's. There are two way to approch repo
in github:

1) create a brand new(empty) repo on github, and push our local repo to it:

After clicking the "Create repository"(on github) it's gonna give you the url of your repo online, copy that you're gonna needed.
Then in the local machine do "git push <url of the repo> master" it's possible to push up other branches as well not olny master.
The commit history and the branches also get pushed to github.

Instead of copying the whole url every time we want to push, we can give it an alias--->git remote add origin <url>
now it 'is called origin, so we can use----------->"git push origin master"  

2) cloning a repo on github to our local machine:

Click on "Clone or download"(just copy the url), in the terminal do "git clone <url>". Now in the editor(Atom) add project folder. From now on we can use "origin"(by defoult) as the alias for the url, that happen when we clone it, so we can use that on pushing,visulized by
"git remote -v".

Collaborating on Github:
-----------------------
So let's say I already have a repository cloned into my local machine, I'll do a "pull" to be up to date, just in case someone did any change. Being in the master.

git pull origin master-------> This fetches all the code(remote) and merges into our master(local). (master to master)

When doing "push" to the remote repo, we have to push branches(local), if we push the master(local), this is gonna overwrite the remote master. So anyone can see it and decide if we want to merge it into the master(remote). example:

Being in the branch index-html; git push origin index-html---->In github a message will show up "You recently pushed branches"---> then click button "compare & pull request"---->After some description click on "Create pull request", this tell publicly that i want to merge the branch index-html to the master(github), this is gonna show up in the "conversation" seccion so everyone can see it, review the code, comment and give their approval by clicking "Merge pull request". At the end we can delete the already merged branch by cliking "delete branch"

Forking:
-------
We find a repo of public acess in any github account and we want to contribute(we cannot push it, we have no access), so fisrt fork the repo into our own account(copy it)-->clone it-->make improvements(localy)--->push it(to our own github account).

Now we want to contribute, hit the "New pull request" button--->"create pull request" button---> the message of what i want to do is public now but i cannot merge it from my account only the original user can. 

The original user is gonna find the request in "Pull request" tab and hit "Merge pull request"

